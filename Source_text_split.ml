open Source_text_rewrite_types

let unhand_split_lst = ref []
let unhand_split = ref (Itmlst [])

let rec split_pair = function
  | Add(Split(rw1, rw1'), Split(rw2, rw2')) -> Add(rw1, rw2), Add(rw1', rw2')
  | AlwaysComb(rw_lst1) -> AlwaysComb(fst(split_pair_lst rw_lst1)), AlwaysComb(snd(split_pair_lst rw_lst1))
  | AlwaysComb2(Split(rw1, rw1')) -> AlwaysComb2(rw1), AlwaysComb2(rw1')
  | AlwaysFF(Split(rw1, rw1'), Split(rw2, rw2')) -> AlwaysFF(rw1, rw2), AlwaysFF(rw1', rw2')
  | AlwaysLatch(Split(rw1, rw1')) -> AlwaysLatch(rw1), AlwaysLatch(rw1')
  | AlwaysLegacy(Split(rw1, rw1'), Split(rw2, rw2')) -> AlwaysLegacy(rw1, rw2), AlwaysLegacy(rw1', rw2')
  | AlwaysSync -> AlwaysSync,AlwaysSync
  | And(Split(rw1, rw1'), Split(rw2, rw2')) -> And(rw1, rw2), And(rw1', rw2')
  | And2(Split(rw1, rw1'), Split(rw2, rw2')) -> And2(rw1, rw2), And2(rw1', rw2')
  | And3(Split(rw1, rw1'), Split(rw2, rw2')) -> And3(rw1, rw2), And3(rw1', rw2')
  | AnyRange(Split(rw1, rw1'), Split(rw2, rw2')) -> AnyRange(rw1, rw2), AnyRange(rw1', rw2')
  | Asgn1(Split(rw1, rw1'), Split(rw2, rw2')) -> Asgn1(rw1, rw2), Asgn1(rw1', rw2')
  | AsgnPat(rw_lst1) -> AsgnPat(fst(split_pair_lst rw_lst1)), AsgnPat(snd(split_pair_lst rw_lst1))
  | Assert -> Assert,Assert
  | AssertProperty -> AssertProperty,AssertProperty
  | At(Split(rw1, rw1')) -> At(rw1), At(rw1')
  | AtStar -> AtStar,AtStar
  | Atom(string1) -> Atom(string1), Atom(string1)
  | AutoFunDecl(string1, Split(rw2, rw2'), Split(rw3, rw3')) -> AutoFunDecl(string1, rw2, rw3), AutoFunDecl(string1, rw2', rw3')
  | BeginBlock(rw_lst1) -> BeginBlock(fst(split_pair_lst rw_lst1)), BeginBlock(snd(split_pair_lst rw_lst1))
  | Bitlst(rw_lst1) -> Bitlst(fst(split_pair_lst rw_lst1)), Bitlst(snd(split_pair_lst rw_lst1))
  | BlockItem(Split(rw1, rw1')) -> BlockItem(rw1), BlockItem(rw1')
  | Blocking(Split(rw1, rw1')) -> Blocking(rw1), Blocking(rw1')
  | BreakSemi -> BreakSemi,BreakSemi
  | CaretTilde(Split(rw1, rw1')) -> CaretTilde(rw1), CaretTilde(rw1')
  | CaseItm(rw_lst1) -> CaseItm(fst(split_pair_lst rw_lst1)), CaseItm(snd(split_pair_lst rw_lst1))
  | CaseStart(Split(rw1, rw1'), rw_lst2) -> CaseStart(rw1, fst(split_pair_lst rw_lst2)), CaseStart(rw1', snd(split_pair_lst rw_lst2))
  | CaseStart1(Split(rw1, rw1')) -> CaseStart1(rw1), CaseStart1(rw1')
  | CaseStartInside(Split(rw1, rw1'), rw_lst2) -> CaseStartInside(rw1, fst(split_pair_lst rw_lst2)), CaseStartInside(rw1', snd(split_pair_lst rw_lst2))
  | CaseStartUniq(Split(rw1, rw1'), rw_lst2) -> CaseStartUniq(rw1, fst(split_pair_lst rw_lst2)), CaseStartUniq(rw1', snd(split_pair_lst rw_lst2))
  | CaseStartUniqInside(Split(rw1, rw1'), rw_lst2) -> CaseStartUniqInside(rw1, fst(split_pair_lst rw_lst2)), CaseStartUniqInside(rw1', snd(split_pair_lst rw_lst2))
  | CaseStmt(rw_lst1, rw_lst2) -> CaseStmt(fst(split_pair_lst rw_lst1), fst(split_pair_lst rw_lst2)), CaseStmt(snd(split_pair_lst rw_lst1), snd(split_pair_lst rw_lst2))
  | Cast(Split(rw1, rw1'), Split(rw2, rw2')) -> Cast(rw1, rw2), Cast(rw1', rw2')
  | CellParamItem2(string1, Split(rw2, rw2')) -> CellParamItem2(string1, rw2), CellParamItem2(string1, rw2')
  | CellParamItem3(string1, Split(rw2, rw2')) -> CellParamItem3(string1, rw2), CellParamItem3(string1, rw2')
  | CellPinItem2(string1, Split(rw2, rw2')) -> CellPinItem2(string1, rw2), CellPinItem2(string1, rw2')
  | CellPinItemImplied(string1) -> CellPinItemImplied(string1), CellPinItemImplied(string1)
  | CellPinItemNC(string1) -> CellPinItemNC(string1), CellPinItemNC(string1)
  | Concat(rw_lst1) -> Concat(fst(split_pair_lst rw_lst1)), Concat(snd(split_pair_lst rw_lst1))
  | CondGen1(Split(rw1, rw1'), Split(rw2, rw2'), Split(rw3, rw3')) -> CondGen1(rw1, rw2, rw3), CondGen1(rw1', rw2', rw3')
  | ContAsgn(rw_lst1) -> ContAsgn(fst(split_pair_lst rw_lst1)), ContAsgn(snd(split_pair_lst rw_lst1))
  | DeclAsgn(Split(rw1, rw1'), rw_lst2) -> DeclAsgn(rw1, fst(split_pair_lst rw_lst2)), DeclAsgn(rw1', snd(split_pair_lst rw_lst2))
  | DeclData(Split(rw1, rw1'), Split(rw2, rw2'), rw_lst3) -> DeclData(rw1, rw2, fst(split_pair_lst rw_lst3)), DeclData(rw1', rw2', snd(split_pair_lst rw_lst3))
  | DeclInt2(rw_lst1) -> DeclInt2(fst(split_pair_lst rw_lst1)), DeclInt2(snd(split_pair_lst rw_lst1))
  | DeclLogic(rw_lst1) -> DeclLogic(fst(split_pair_lst rw_lst1)), DeclLogic(snd(split_pair_lst rw_lst1))
  | DeclLogic2(rw_lst1, rw_lst2) -> DeclLogic2(fst(split_pair_lst rw_lst1), fst(split_pair_lst rw_lst2)), DeclLogic2(snd(split_pair_lst rw_lst1), snd(split_pair_lst rw_lst2))
  | DeclModPort(rw_lst1) -> DeclModPort(fst(split_pair_lst rw_lst1)), DeclModPort(snd(split_pair_lst rw_lst1))
  | DeclReg(rw_lst1, rw_lst2, Split(rw3, rw3')) -> DeclReg(fst(split_pair_lst rw_lst1), fst(split_pair_lst rw_lst2), rw3), DeclReg(snd(split_pair_lst rw_lst1), snd(split_pair_lst rw_lst2), rw3')
  | Deflt -> Deflt,Deflt
  | Div(Split(rw1, rw1'), Split(rw2, rw2')) -> Div(rw1, rw2), Div(rw1', rw2')
  | Dot1(Split(rw1, rw1'), Split(rw2, rw2')) -> Dot1(rw1, rw2), Dot1(rw1', rw2')
  | Dot3(Split(rw1, rw1'), Split(rw2, rw2'), Split(rw3, rw3')) -> Dot3(rw1, rw2, rw3), Dot3(rw1', rw2', rw3')
  | DotBus(Split(rw1, rw1'), Split(rw2, rw2'), Split(rw3, rw3'), rw_lst4) -> DotBus(rw1, rw2, rw3, fst(split_pair_lst rw_lst4)), DotBus(rw1', rw2', rw3', snd(split_pair_lst rw_lst4))
  | Edge(Split(rw1, rw1'), Split(rw2, rw2')) -> Edge(rw1, rw2), Edge(rw1', rw2')
  | ElabTask(Split(rw1, rw1')) -> ElabTask(rw1), ElabTask(rw1')
  | ElseStmt(Split(rw1, rw1')) -> ElseStmt(rw1), ElseStmt(rw1')
  | EnumInit(string1, Split(rw2, rw2')) -> EnumInit(string1, rw2), EnumInit(string1, rw2')
  | Equals(Split(rw1, rw1'), Split(rw2, rw2')) -> Equals(rw1, rw2), Equals(rw1', rw2')
  | Equals3(Split(rw1, rw1'), Split(rw2, rw2')) -> Equals3(rw1, rw2), Equals3(rw1', rw2')
  | EqualsQuery(Split(rw1, rw1'), Split(rw2, rw2')) -> EqualsQuery(rw1, rw2), EqualsQuery(rw1', rw2')
  | Equate(Split(rw1, rw1'), Split(rw2, rw2')) -> Equate(rw1, rw2), Equate(rw1', rw2')
  | EquateArrayField(Split(rw1, rw1'), Split(rw2, rw2'), Split(rw3, rw3'), Split(rw4, rw4'), Split(rw5, rw5')) -> EquateArrayField(rw1, rw2, rw3, rw4, rw5), EquateArrayField(rw1', rw2', rw3', rw4', rw5')
  | EquateConcat(rw_lst1, Split(rw2, rw2')) -> EquateConcat(fst(split_pair_lst rw_lst1), rw2), EquateConcat(snd(split_pair_lst rw_lst1), rw2')
  | EquateField(Split(rw1, rw1'), Split(rw2, rw2'), Split(rw3, rw3')) -> EquateField(rw1, rw2, rw3), EquateField(rw1', rw2', rw3')
  | EquateSelect(Split(rw1, rw1'), Split(rw2, rw2'), Split(rw3, rw3')) -> EquateSelect(rw1, rw2, rw3), EquateSelect(rw1', rw2', rw3')
  | EquateSelect2(Split(rw1, rw1'), Split(rw2, rw2'), Split(rw3, rw3')) -> EquateSelect2(rw1, rw2, rw3), EquateSelect2(rw1', rw2', rw3')
  | EquateSlice(Split(rw1, rw1'), Split(rw2, rw2'), Split(rw3, rw3'), Split(rw4, rw4')) -> EquateSlice(rw1, rw2, rw3, rw4), EquateSlice(rw1', rw2', rw3', rw4')
  | EquateSlicePlus(Split(rw1, rw1'), Split(rw2, rw2'), Split(rw3, rw3'), Split(rw4, rw4')) -> EquateSlicePlus(rw1, rw2, rw3, rw4), EquateSlicePlus(rw1', rw2', rw3', rw4')
  | EventOr(rw_lst1) -> EventOr(fst(split_pair_lst rw_lst1)), EventOr(snd(split_pair_lst rw_lst1))
  | ExprOKL(rw_lst1) -> ExprOKL(fst(split_pair_lst rw_lst1)), ExprOKL(snd(split_pair_lst rw_lst1))
  | ExprQuote1(Split(rw1, rw1'), Split(rw2, rw2')) -> ExprQuote1(rw1, rw2), ExprQuote1(rw1', rw2')
  | Expression(Split(rw1, rw1')) -> Expression(rw1), Expression(rw1')
  | Final(rw_lst1) -> Final(fst(split_pair_lst rw_lst1)), Final(snd(split_pair_lst rw_lst1))
  | Float(float1) -> Float(float1), Float(float1)
  | FopAsgn(Split(rw1, rw1'), Split(rw2, rw2')) -> FopAsgn(rw1, rw2), FopAsgn(rw1', rw2')
  | FopAsgn1(Split(rw1, rw1'), Split(rw2, rw2'), Split(rw3, rw3'), Split(rw4, rw4')) -> FopAsgn1(rw1, rw2, rw3, rw4), FopAsgn1(rw1', rw2', rw3', rw4')
  | FopAsgnArrayField(Split(rw1, rw1'), Split(rw2, rw2'), Split(rw3, rw3')) -> FopAsgnArrayField(rw1, rw2, rw3), FopAsgnArrayField(rw1', rw2', rw3')
  | FopAsgnArrayField2(Split(rw1, rw1'), Split(rw2, rw2'), Split(rw3, rw3')) -> FopAsgnArrayField2(rw1, rw2, rw3), FopAsgnArrayField2(rw1', rw2', rw3')
  | FopAsgnArrayField3(Split(rw1, rw1'), Split(rw2, rw2'), Split(rw3, rw3'), Split(rw4, rw4')) -> FopAsgnArrayField3(rw1, rw2, rw3, rw4), FopAsgnArrayField3(rw1', rw2', rw3', rw4')
  | FopAsgnArrayField4(Split(rw1, rw1'), Split(rw2, rw2'), Split(rw3, rw3'), Split(rw4, rw4'), Split(rw5, rw5'), Split(rw6, rw6')) -> FopAsgnArrayField4(rw1, rw2, rw3, rw4, rw5, rw6), FopAsgnArrayField4(rw1', rw2', rw3', rw4', rw5', rw6')
  | FopAsgnArrayField5(Split(rw1, rw1'), Split(rw2, rw2'), Split(rw3, rw3'), Split(rw4, rw4'), Split(rw5, rw5')) -> FopAsgnArrayField5(rw1, rw2, rw3, rw4, rw5), FopAsgnArrayField5(rw1', rw2', rw3', rw4', rw5')
  | FopAsgnArrayField6(Split(rw1, rw1'), Split(rw2, rw2'), Split(rw3, rw3'), Split(rw4, rw4'), Split(rw5, rw5')) -> FopAsgnArrayField6(rw1, rw2, rw3, rw4, rw5), FopAsgnArrayField6(rw1', rw2', rw3', rw4', rw5')
  | FopAsgnArrayField7(Split(rw1, rw1'), Split(rw2, rw2'), Split(rw3, rw3'), Split(rw4, rw4'), Split(rw5, rw5')) -> FopAsgnArrayField7(rw1, rw2, rw3, rw4, rw5), FopAsgnArrayField7(rw1', rw2', rw3', rw4', rw5')
  | FopAsgnArrayField8(Split(rw1, rw1'), Split(rw2, rw2'), Split(rw3, rw3'), Split(rw4, rw4'), Split(rw5, rw5')) -> FopAsgnArrayField8(rw1, rw2, rw3, rw4, rw5), FopAsgnArrayField8(rw1', rw2', rw3', rw4', rw5')
  | FopAsgnArrayField9(Split(rw1, rw1'), Split(rw2, rw2'), Split(rw3, rw3'), Split(rw4, rw4'), Split(rw5, rw5'), Split(rw6, rw6')) -> FopAsgnArrayField9(rw1, rw2, rw3, rw4, rw5, rw6), FopAsgnArrayField9(rw1', rw2', rw3', rw4', rw5', rw6')
  | FopAsgnArrayMemSel(Split(rw1, rw1'), Split(rw2, rw2'), Split(rw3, rw3'), Split(rw4, rw4')) -> FopAsgnArrayMemSel(rw1, rw2, rw3, rw4), FopAsgnArrayMemSel(rw1', rw2', rw3', rw4')
  | FopAsgnArrayRange(Split(rw1, rw1'), Split(rw2, rw2'), Split(rw3, rw3'), Split(rw4, rw4')) -> FopAsgnArrayRange(rw1, rw2, rw3, rw4), FopAsgnArrayRange(rw1', rw2', rw3', rw4')
  | FopAsgnArrayRange2(Split(rw1, rw1'), Split(rw2, rw2'), Split(rw3, rw3'), Split(rw4, rw4')) -> FopAsgnArrayRange2(rw1, rw2, rw3, rw4), FopAsgnArrayRange2(rw1', rw2', rw3', rw4')
  | FopAsgnArraySel(Split(rw1, rw1'), Split(rw2, rw2'), Split(rw3, rw3')) -> FopAsgnArraySel(rw1, rw2, rw3), FopAsgnArraySel(rw1', rw2', rw3')
  | FopAsgnArrayWid(Split(rw1, rw1'), Split(rw2, rw2'), Split(rw3, rw3'), Split(rw4, rw4')) -> FopAsgnArrayWid(rw1, rw2, rw3, rw4), FopAsgnArrayWid(rw1', rw2', rw3', rw4')
  | FopAsgnConcat(rw_lst1, Split(rw2, rw2')) -> FopAsgnConcat(fst(split_pair_lst rw_lst1), rw2), FopAsgnConcat(snd(split_pair_lst rw_lst1), rw2')
  | ForEach(Split(rw1, rw1'), rw_lst2) -> ForEach(rw1, fst(split_pair_lst rw_lst2)), ForEach(rw1', snd(split_pair_lst rw_lst2))
  | ForLoop(rw_lst1, Split(rw2, rw2'), Split(rw3, rw3'), Split(rw4, rw4')) -> ForLoop(fst(split_pair_lst rw_lst1), rw2, rw3, rw4), ForLoop(snd(split_pair_lst rw_lst1), rw2', rw3', rw4')
  | FunDecl(string1, Split(rw2, rw2'), Split(rw3, rw3')) -> FunDecl(string1, rw2, rw3), FunDecl(string1, rw2', rw3')
  | FunGuts(rw_lst1, rw_lst2) -> FunGuts(fst(split_pair_lst rw_lst1), fst(split_pair_lst rw_lst2)), FunGuts(snd(split_pair_lst rw_lst1), snd(split_pair_lst rw_lst2))
  | FunRef(string1, rw_lst2) -> FunRef(string1, fst(split_pair_lst rw_lst2)), FunRef(string1, snd(split_pair_lst rw_lst2))
  | FunRef2(string1, rw_lst2, rw_lst3) -> FunRef2(string1, fst(split_pair_lst rw_lst2), fst(split_pair_lst rw_lst3)), FunRef2(string1, snd(split_pair_lst rw_lst2), snd(split_pair_lst rw_lst3))
  | GenBlock(rw_lst1) -> GenBlock(fst(split_pair_lst rw_lst1)), GenBlock(snd(split_pair_lst rw_lst1))
  | GenItem(string1, rw_lst2) -> GenItem(string1, fst(split_pair_lst rw_lst2)), GenItem(string1, snd(split_pair_lst rw_lst2))
  | Genvar(rw_lst1) -> Genvar(fst(split_pair_lst rw_lst1)), Genvar(snd(split_pair_lst rw_lst1))
  | Greater(Split(rw1, rw1'), Split(rw2, rw2')) -> Greater(rw1, rw2), Greater(rw1', rw2')
  | GtEq(Split(rw1, rw1'), Split(rw2, rw2')) -> GtEq(rw1, rw2), GtEq(rw1', rw2')
  | Hash(Split(rw1, rw1')) -> Hash(rw1), Hash(rw1')
  | HyphenGt(Split(rw1, rw1'), Split(rw2, rw2')) -> HyphenGt(rw1, rw2), HyphenGt(rw1', rw2')
  | Id(string1) -> Id(string1), Id(string1)
  | IdArrayed1(Split(rw1, rw1'), Split(rw2, rw2'), Split(rw3, rw3')) -> IdArrayed1(rw1, rw2, rw3), IdArrayed1(rw1', rw2', rw3')
  | IdArrayed2(Split(rw1, rw1'), Split(rw2, rw2')) -> IdArrayed2(rw1, rw2), IdArrayed2(rw1', rw2')
  | IdArrayed3(rw_lst1, Split(rw2, rw2')) -> IdArrayed3(fst(split_pair_lst rw_lst1), rw2), IdArrayed3(snd(split_pair_lst rw_lst1), rw2')
  | IdArrayedColon(Split(rw1, rw1'), Split(rw2, rw2'), Split(rw3, rw3')) -> IdArrayedColon(rw1, rw2, rw3), IdArrayedColon(rw1', rw2', rw3')
  | IdArrayedHyphenColon(Split(rw1, rw1'), Split(rw2, rw2'), Split(rw3, rw3')) -> IdArrayedHyphenColon(rw1, rw2, rw3), IdArrayedHyphenColon(rw1', rw2', rw3')
  | IdArrayedPlusColon(Split(rw1, rw1'), Split(rw2, rw2'), Split(rw3, rw3')) -> IdArrayedPlusColon(rw1, rw2, rw3), IdArrayedPlusColon(rw1', rw2', rw3')
  | If1(Split(rw1, rw1'), Split(rw2, rw2')) -> If1(rw1, rw2), If1(rw1', rw2')
  | If2(Split(rw1, rw1'), Split(rw2, rw2'), Split(rw3, rw3')) -> If2(rw1, rw2, rw3), If2(rw1', rw2', rw3')
  | Iff(Split(rw1, rw1'), Split(rw2, rw2')) -> Iff(rw1, rw2), Iff(rw1', rw2')
  | Import(rw_lst1) -> Import(fst(split_pair_lst rw_lst1)), Import(snd(split_pair_lst rw_lst1))
  | In -> In,In
  | Inc(Split(rw1, rw1')) -> Inc(rw1), Inc(rw1')
  | InitPair(Split(rw1, rw1'), Split(rw2, rw2')) -> InitPair(rw1, rw2), InitPair(rw1', rw2')
  | InitPat(rw_lst1) -> InitPat(fst(split_pair_lst rw_lst1)), InitPat(snd(split_pair_lst rw_lst1))
  | InitSig(Split(rw1, rw1'), Split(rw2, rw2')) -> InitSig(rw1, rw2), InitSig(rw1', rw2')
  | Initial(rw_lst1) -> Initial(fst(split_pair_lst rw_lst1)), Initial(snd(split_pair_lst rw_lst1))
  | Inout -> Inout,Inout
  | InsideCase(Split(rw1, rw1'), Split(rw2, rw2')) -> InsideCase(rw1, rw2), InsideCase(rw1', rw2')
  | InsideRange(Split(rw1, rw1'), Split(rw2, rw2')) -> InsideRange(rw1, rw2), InsideRange(rw1', rw2')
  | InstArrayDecl(Split(rw1, rw1'), rw_lst2, Split(rw3, rw3'), rw_lst4, rw_lst5) -> InstArrayDecl(rw1, fst(split_pair_lst rw_lst2), rw3, fst(split_pair_lst rw_lst4), fst(split_pair_lst rw_lst5)), InstArrayDecl(rw1', snd(split_pair_lst rw_lst2), rw3', snd(split_pair_lst rw_lst4), snd(split_pair_lst rw_lst5))
  | InstDecl(Split(rw1, rw1'), rw_lst2, rw_lst3) -> InstDecl(rw1, fst(split_pair_lst rw_lst2), fst(split_pair_lst rw_lst3)), InstDecl(rw1', snd(split_pair_lst rw_lst2), snd(split_pair_lst rw_lst3))
  | InstNameParen1(string1, rw_lst2) -> InstNameParen1(string1, fst(split_pair_lst rw_lst2)), InstNameParen1(string1, snd(split_pair_lst rw_lst2))
  | InstNameParen2(string1, rw_lst2) -> InstNameParen2(string1, fst(split_pair_lst rw_lst2)), InstNameParen2(string1, snd(split_pair_lst rw_lst2))
  | InstRange(Split(rw1, rw1'), Split(rw2, rw2')) -> InstRange(rw1, rw2), InstRange(rw1', rw2')
  | IntfDecl(string1, Split(rw2, rw2'), Split(rw3, rw3'), Split(rw4, rw4')) -> IntfDecl(string1, rw2, rw3, rw4), IntfDecl(string1, rw2', rw3', rw4')
  | Intgr(int1) -> Intgr(int1), Intgr(int1)
  | ItemAsgn(Split(rw1, rw1')) -> ItemAsgn(rw1), ItemAsgn(rw1')
  | Itmlst(rw_lst1) -> Itmlst(fst(split_pair_lst rw_lst1)), Itmlst(snd(split_pair_lst rw_lst1))
  | Less(Split(rw1, rw1'), Split(rw2, rw2')) -> Less(rw1, rw2), Less(rw1', rw2')
  | LocalParamTyp(Split(rw1, rw1')) -> LocalParamTyp(rw1), LocalParamTyp(rw1')
  | Logic(rw_lst1, rw_lst2) -> Logic(fst(split_pair_lst rw_lst1), fst(split_pair_lst rw_lst2)), Logic(snd(split_pair_lst rw_lst1), snd(split_pair_lst rw_lst2))
  | LoopGen1(Split(rw1, rw1'), string2, Split(rw3, rw3'), Split(rw4, rw4'), Split(rw5, rw5'), rw_lst6) -> LoopGen1(rw1, string2, rw3, rw4, rw5, fst(split_pair_lst rw_lst6)), LoopGen1(rw1', string2, rw3', rw4', rw5', snd(split_pair_lst rw_lst6))
  | LtEq(Split(rw1, rw1'), Split(rw2, rw2')) -> LtEq(rw1, rw2), LtEq(rw1', rw2')
  | LtGt(Split(rw1, rw1'), Split(rw2, rw2')) -> LtGt(rw1, rw2), LtGt(rw1', rw2')
  | Mod(Split(rw1, rw1'), Split(rw2, rw2')) -> Mod(rw1, rw2), Mod(rw1', rw2')
  | ModPortItm(string1, rw_lst2) -> ModPortItm(string1, fst(split_pair_lst rw_lst2)), ModPortItm(string1, snd(split_pair_lst rw_lst2))
  | Modul(string1, rw_lst2, rw_lst3, rw_lst4) -> Modul(string1, fst(split_pair_lst rw_lst2), fst(split_pair_lst rw_lst3), fst(split_pair_lst rw_lst4)), Modul(string1, snd(split_pair_lst rw_lst2), snd(split_pair_lst rw_lst3), snd(split_pair_lst rw_lst4))
  | Mult(Split(rw1, rw1'), Split(rw2, rw2')) -> Mult(rw1, rw2), Mult(rw1', rw2')
  | Nand(Split(rw1, rw1'), Split(rw2, rw2')) -> Nand(rw1, rw2), Nand(rw1', rw2')
  | Neg(Split(rw1, rw1')) -> Neg(rw1), Neg(rw1')
  | NetDecl(rw_lst1, rw_lst2) -> NetDecl(fst(split_pair_lst rw_lst1), fst(split_pair_lst rw_lst2)), NetDecl(snd(split_pair_lst rw_lst1), snd(split_pair_lst rw_lst2))
  | NonBlocking(Split(rw1, rw1'), Split(rw2, rw2')) -> NonBlocking(rw1, rw2), NonBlocking(rw1', rw2')
  | Nor(Split(rw1, rw1'), Split(rw2, rw2')) -> Nor(rw1, rw2), Nor(rw1', rw2')
  | NotEq(Split(rw1, rw1'), Split(rw2, rw2')) -> NotEq(rw1, rw2), NotEq(rw1', rw2')
  | NotEq3(Split(rw1, rw1'), Split(rw2, rw2')) -> NotEq3(rw1, rw2), NotEq3(rw1', rw2')
  | NotEqQuery(Split(rw1, rw1'), Split(rw2, rw2')) -> NotEqQuery(rw1, rw2), NotEqQuery(rw1', rw2')
  | Number(int1, int2, int3, string4) -> Number(int1, int2, int3, string4), Number(int1, int2, int3, string4)
  | OpenRange(rw_lst1) -> OpenRange(fst(split_pair_lst rw_lst1)), OpenRange(snd(split_pair_lst rw_lst1))
  | Or(Split(rw1, rw1'), Split(rw2, rw2')) -> Or(rw1, rw2), Or(rw1', rw2')
  | Or2(Split(rw1, rw1'), Split(rw2, rw2')) -> Or2(rw1, rw2), Or2(rw1', rw2')
  | Out -> Out,Out
  | PackageBody(string1, rw_lst2) -> PackageBody(string1, fst(split_pair_lst rw_lst2)), PackageBody(string1, snd(split_pair_lst rw_lst2))
  | PackageParam(rw_lst1, Split(rw2, rw2')) -> PackageParam(fst(split_pair_lst rw_lst1), rw2), PackageParam(snd(split_pair_lst rw_lst1), rw2')
  | PackageParam2(string1, string2, rw_lst3, Split(rw4, rw4')) -> PackageParam2(string1, string2, fst(split_pair_lst rw_lst3), rw4), PackageParam2(string1, string2, snd(split_pair_lst rw_lst3), rw4')
  | PackageRef(string1, string2) -> PackageRef(string1, string2), PackageRef(string1, string2)
  | Param(string1, Split(rw2, rw2'), rw_lst3) -> Param(string1, rw2, fst(split_pair_lst rw_lst3)), Param(string1, rw2', snd(split_pair_lst rw_lst3))
  | ParamAsgn1(string1, Split(rw2, rw2')) -> ParamAsgn1(string1, rw2), ParamAsgn1(string1, rw2')
  | ParamAsgn2(string1, rw_lst2, Split(rw3, rw3')) -> ParamAsgn2(string1, fst(split_pair_lst rw_lst2), rw3), ParamAsgn2(string1, snd(split_pair_lst rw_lst2), rw3')
  | ParamDecl(Split(rw1, rw1'), rw_lst2) -> ParamDecl(rw1, fst(split_pair_lst rw_lst2)), ParamDecl(rw1', snd(split_pair_lst rw_lst2))
  | ParamPort(rw_lst1) -> ParamPort(fst(split_pair_lst rw_lst1)), ParamPort(snd(split_pair_lst rw_lst1))
  | PatMember1(Split(rw1, rw1'), Split(rw2, rw2')) -> PatMember1(rw1, rw2), PatMember1(rw1', rw2')
  | PatMemberDflt(Split(rw1, rw1')) -> PatMemberDflt(rw1), PatMemberDflt(rw1')
  | PkgImport(Split(rw1, rw1')) -> PkgImport(rw1), PkgImport(rw1')
  | PkgImportItm(string1, Split(rw2, rw2')) -> PkgImportItm(string1, rw2), PkgImportItm(string1, rw2')
  | Pling(Split(rw1, rw1')) -> Pling(rw1), Pling(rw1')
  | Port(Split(rw1, rw1'), string2, rw_lst3, Split(rw4, rw4')) -> Port(rw1, string2, fst(split_pair_lst rw_lst3), rw4), Port(rw1', string2, snd(split_pair_lst rw_lst3), rw4')
  | PortDir(Split(rw1, rw1'), Split(rw2, rw2')) -> PortDir(rw1, rw2), PortDir(rw1', rw2')
  | PortFront(Split(rw1, rw1'), Split(rw2, rw2')) -> PortFront(rw1, rw2), PortFront(rw1', rw2')
  | PortItem(Split(rw1, rw1'), Split(rw2, rw2')) -> PortItem(rw1, rw2), PortItem(rw1', rw2')
  | PortItemFront(Split(rw1, rw1'), Split(rw2, rw2')) -> PortItemFront(rw1, rw2), PortItemFront(rw1', rw2')
  | PortItemFront2(Split(rw1, rw1'), Split(rw2, rw2'), rw_lst3) -> PortItemFront2(rw1, rw2, fst(split_pair_lst rw_lst3)), PortItemFront2(rw1', rw2', snd(split_pair_lst rw_lst3))
  | PortsStar(rw_lst1) -> PortsStar(fst(split_pair_lst rw_lst1)), PortsStar(snd(split_pair_lst rw_lst1))
  | Pos(Split(rw1, rw1')) -> Pos(rw1), Pos(rw1')
  | PropertySpec -> PropertySpec,PropertySpec
  | Query(Split(rw1, rw1'), Split(rw2, rw2'), Split(rw3, rw3')) -> Query(rw1, rw2, rw3), Query(rw1', rw2', rw3')
  | RedAnd(Split(rw1, rw1')) -> RedAnd(rw1), RedAnd(rw1')
  | RedOr(Split(rw1, rw1')) -> RedOr(rw1), RedOr(rw1')
  | RedXor(Split(rw1, rw1')) -> RedXor(rw1), RedXor(rw1')
  | Repl(Split(rw1, rw1'), rw_lst2) -> Repl(rw1, fst(split_pair_lst rw_lst2)), Repl(rw1', snd(split_pair_lst rw_lst2))
  | Return(Split(rw1, rw1')) -> Return(rw1), Return(rw1')
  | SUDecl(Split(rw1, rw1'), rw_lst2) -> SUDecl(rw1, fst(split_pair_lst rw_lst2)), SUDecl(rw1', snd(split_pair_lst rw_lst2))
  | SUMember(Split(rw1, rw1'), rw_lst2) -> SUMember(rw1, fst(split_pair_lst rw_lst2)), SUMember(rw1', snd(split_pair_lst rw_lst2))
  | Seq(string1, rw_lst2) -> Seq(string1, fst(split_pair_lst rw_lst2)), Seq(string1, snd(split_pair_lst rw_lst2))
  | Shiftl(Split(rw1, rw1'), Split(rw2, rw2')) -> Shiftl(rw1, rw2), Shiftl(rw1', rw2')
  | Shiftr(Split(rw1, rw1'), Split(rw2, rw2')) -> Shiftr(rw1, rw2), Shiftr(rw1', rw2')
  | Shiftr3(Split(rw1, rw1'), Split(rw2, rw2')) -> Shiftr3(rw1, rw2), Shiftr3(rw1', rw2')
  | SideEffect(Split(rw1, rw1'), Split(rw2, rw2')) -> SideEffect(rw1, rw2), SideEffect(rw1', rw2')
  | Signed(Split(rw1, rw1')) -> Signed(rw1), Signed(rw1')
  | Split(Split(rw1, rw1'), Split(rw2, rw2')) -> Split(rw1, rw2), Split(rw1', rw2')
  | StarStar(Split(rw1, rw1'), Split(rw2, rw2')) -> StarStar(rw1, rw2), StarStar(rw1', rw2')
  | String(string1) -> String(string1), String(string1)
  | Sub(Split(rw1, rw1'), Split(rw2, rw2')) -> Sub(rw1, rw2), Sub(rw1', rw2')
  | Sys(string1, Split(rw2, rw2')) -> Sys(string1, rw2), Sys(string1, rw2')
  | SysFuncCall(string1, rw_lst2) -> SysFuncCall(string1, fst(split_pair_lst rw_lst2)), SysFuncCall(string1, snd(split_pair_lst rw_lst2))
  | SysTaskCall(string1, rw_lst2) -> SysTaskCall(string1, fst(split_pair_lst rw_lst2)), SysTaskCall(string1, snd(split_pair_lst rw_lst2))
  | SysTaskRef(Split(rw1, rw1'), rw_lst2) -> SysTaskRef(rw1, fst(split_pair_lst rw_lst2)), SysTaskRef(rw1', snd(split_pair_lst rw_lst2))
  | TFBody(rw_lst1, rw_lst2) -> TFBody(fst(split_pair_lst rw_lst1), fst(split_pair_lst rw_lst2)), TFBody(snd(split_pair_lst rw_lst1), snd(split_pair_lst rw_lst2))
  | TF_port_decl(Split(rw1, rw1'), rw_lst2, rw_lst3) -> TF_port_decl(rw1, fst(split_pair_lst rw_lst2), fst(split_pair_lst rw_lst3)), TF_port_decl(rw1', snd(split_pair_lst rw_lst2), snd(split_pair_lst rw_lst3))
  | TF_variable(Split(rw1, rw1'), Split(rw2, rw2'), Split(rw3, rw3'), Split(rw4, rw4')) -> TF_variable(rw1, rw2, rw3, rw4), TF_variable(rw1', rw2', rw3', rw4')
  | TaskDecl(string1, Split(rw2, rw2'), Split(rw3, rw3'), Split(rw4, rw4')) -> TaskDecl(string1, rw2, rw3, rw4), TaskDecl(string1, rw2', rw3', rw4')
  | TaskRef(string1, rw_lst2) -> TaskRef(string1, fst(split_pair_lst rw_lst2)), TaskRef(string1, snd(split_pair_lst rw_lst2))
  | TaskRef2(string1, Split(rw2, rw2')) -> TaskRef2(string1, rw2), TaskRef2(string1, rw2')
  | Tilde(Split(rw1, rw1')) -> Tilde(rw1), Tilde(rw1')
  | TildeAnd(Split(rw1, rw1')) -> TildeAnd(rw1), TildeAnd(rw1')
  | TildeOr(Split(rw1, rw1')) -> TildeOr(rw1), TildeOr(rw1')
  | Typ1(string1) -> Typ1(string1), Typ1(string1)
  | Typ10(string1, rw_lst2, string3) -> Typ10(string1, fst(split_pair_lst rw_lst2), string3), Typ10(string1, snd(split_pair_lst rw_lst2), string3)
  | Typ11(Split(rw1, rw1'), rw_lst2, rw_lst3) -> Typ11(rw1, fst(split_pair_lst rw_lst2), fst(split_pair_lst rw_lst3)), Typ11(rw1', snd(split_pair_lst rw_lst2), snd(split_pair_lst rw_lst3))
  | Typ12(rw_lst1, Split(rw2, rw2'), rw_lst3) -> Typ12(fst(split_pair_lst rw_lst1), rw2, fst(split_pair_lst rw_lst3)), Typ12(snd(split_pair_lst rw_lst1), rw2', snd(split_pair_lst rw_lst3))
  | Typ2(string1, rw_lst2, rw_lst3) -> Typ2(string1, fst(split_pair_lst rw_lst2), fst(split_pair_lst rw_lst3)), Typ2(string1, snd(split_pair_lst rw_lst2), snd(split_pair_lst rw_lst3))
  | Typ3(string1, rw_lst2) -> Typ3(string1, fst(split_pair_lst rw_lst2)), Typ3(string1, snd(split_pair_lst rw_lst2))
  | Typ4(string1, rw_lst2, rw_lst3, rw_lst4) -> Typ4(string1, fst(split_pair_lst rw_lst2), fst(split_pair_lst rw_lst3), fst(split_pair_lst rw_lst4)), Typ4(string1, snd(split_pair_lst rw_lst2), snd(split_pair_lst rw_lst3), snd(split_pair_lst rw_lst4))
  | Typ5(Split(rw1, rw1'), rw_lst2) -> Typ5(rw1, fst(split_pair_lst rw_lst2)), Typ5(rw1', snd(split_pair_lst rw_lst2))
  | Typ6(Split(rw1, rw1')) -> Typ6(rw1), Typ6(rw1')
  | Typ7(string1, Split(rw2, rw2')) -> Typ7(string1, rw2), Typ7(string1, rw2')
  | Typ8(Split(rw1, rw1'), Split(rw2, rw2')) -> Typ8(rw1, rw2), Typ8(rw1', rw2')
  | Typ9(string1, rw_lst2, Split(rw3, rw3')) -> Typ9(string1, fst(split_pair_lst rw_lst2), rw3), Typ9(string1, snd(split_pair_lst rw_lst2), rw3')
  | TypEnum3(rw_lst1) -> TypEnum3(fst(split_pair_lst rw_lst1)), TypEnum3(snd(split_pair_lst rw_lst1))
  | TypEnum4(Split(rw1, rw1'), rw_lst2, rw_lst3) -> TypEnum4(rw1, fst(split_pair_lst rw_lst2), fst(split_pair_lst rw_lst3)), TypEnum4(rw1', snd(split_pair_lst rw_lst2), snd(split_pair_lst rw_lst3))
  | TypEnum5(Split(rw1, rw1')) -> TypEnum5(rw1), TypEnum5(rw1')
  | TypEnum6(string1, Split(rw2, rw2'), rw_lst3) -> TypEnum6(string1, rw2, fst(split_pair_lst rw_lst3)), TypEnum6(string1, rw2', snd(split_pair_lst rw_lst3))
  | TypParam(string1, Split(rw2, rw2'), rw_lst3) -> TypParam(string1, rw2, fst(split_pair_lst rw_lst3)), TypParam(string1, rw2', snd(split_pair_lst rw_lst3))
  | UMinus(Split(rw1, rw1')) -> UMinus(rw1), UMinus(rw1')
  | UPlus(Split(rw1, rw1')) -> UPlus(rw1), UPlus(rw1')
  | Unimplemented(string1, rw_lst2) -> Unimplemented(string1, fst(split_pair_lst rw_lst2)), Unimplemented(string1, snd(split_pair_lst rw_lst2))
  | Union(Split(rw1, rw1'), rw_lst2) -> Union(rw1, fst(split_pair_lst rw_lst2)), Union(rw1', snd(split_pair_lst rw_lst2))
  | Unknown(string1, rw_lst2) -> Unknown(string1, fst(split_pair_lst rw_lst2)), Unknown(string1, snd(split_pair_lst rw_lst2))
  | Unsigned(Split(rw1, rw1')) -> Unsigned(rw1), Unsigned(rw1')
  | VNum(string1) -> VNum(string1), VNum(string1)
  | ValueRange(Split(rw1, rw1'), Split(rw2, rw2')) -> ValueRange(rw1, rw2), ValueRange(rw1', rw2')
  | VarDeclAsgn(Split(rw1, rw1'), Split(rw2, rw2')) -> VarDeclAsgn(rw1, rw2), VarDeclAsgn(rw1', rw2')
  | VarDim(Split(rw1, rw1')) -> VarDim(rw1), VarDim(rw1')
  | While(Split(rw1, rw1'), rw_lst2) -> While(rw1, fst(split_pair_lst rw_lst2)), While(rw1', snd(split_pair_lst rw_lst2))
  | WireExpr(Split(rw1, rw1'), Split(rw2, rw2')) -> WireExpr(rw1, rw2), WireExpr(rw1', rw2')
  | Xnor(Split(rw1, rw1'), Split(rw2, rw2')) -> Xnor(rw1, rw2), Xnor(rw1', rw2')
  | Xor(Split(rw1, rw1'), Split(rw2, rw2')) -> Xor(rw1, rw2), Xor(rw1', rw2')
| oth -> unhand_split := oth; failwith "split_pair"

and split_pair_lst = function
| [] -> [], []
| Split (p,q) :: tl -> let r, s = split_pair_lst tl in p :: r, q :: s
| oth -> unhand_split_lst := oth; failwith "split_pair_lst"

